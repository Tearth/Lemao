/* automatically generated by rust-bindgen 0.62.0 */

pub const __wgl_wglext_h_: u32 = 1;
pub const WGL_WGLEXT_VERSION: u32 = 20220530;
pub const WGL_ARB_buffer_region: u32 = 1;
pub const WGL_FRONT_COLOR_BUFFER_BIT_ARB: u32 = 1;
pub const WGL_BACK_COLOR_BUFFER_BIT_ARB: u32 = 2;
pub const WGL_DEPTH_BUFFER_BIT_ARB: u32 = 4;
pub const WGL_STENCIL_BUFFER_BIT_ARB: u32 = 8;
pub const WGL_ARB_context_flush_control: u32 = 1;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_ARB: u32 = 8343;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB: u32 = 0;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB: u32 = 8344;
pub const WGL_ARB_create_context: u32 = 1;
pub const WGL_CONTEXT_DEBUG_BIT_ARB: u32 = 1;
pub const WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB: u32 = 2;
pub const WGL_CONTEXT_MAJOR_VERSION_ARB: u32 = 8337;
pub const WGL_CONTEXT_MINOR_VERSION_ARB: u32 = 8338;
pub const WGL_CONTEXT_LAYER_PLANE_ARB: u32 = 8339;
pub const WGL_CONTEXT_FLAGS_ARB: u32 = 8340;
pub const ERROR_INVALID_VERSION_ARB: u32 = 8341;
pub const WGL_ARB_create_context_no_error: u32 = 1;
pub const WGL_CONTEXT_OPENGL_NO_ERROR_ARB: u32 = 12723;
pub const WGL_ARB_create_context_profile: u32 = 1;
pub const WGL_CONTEXT_PROFILE_MASK_ARB: u32 = 37158;
pub const WGL_CONTEXT_CORE_PROFILE_BIT_ARB: u32 = 1;
pub const WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB: u32 = 2;
pub const ERROR_INVALID_PROFILE_ARB: u32 = 8342;
pub const WGL_ARB_create_context_robustness: u32 = 1;
pub const WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB: u32 = 4;
pub const WGL_LOSE_CONTEXT_ON_RESET_ARB: u32 = 33362;
pub const WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB: u32 = 33366;
pub const WGL_NO_RESET_NOTIFICATION_ARB: u32 = 33377;
pub const WGL_ARB_extensions_string: u32 = 1;
pub const WGL_ARB_framebuffer_sRGB: u32 = 1;
pub const WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB: u32 = 8361;
pub const WGL_ARB_make_current_read: u32 = 1;
pub const ERROR_INVALID_PIXEL_TYPE_ARB: u32 = 8259;
pub const ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB: u32 = 8276;
pub const WGL_ARB_multisample: u32 = 1;
pub const WGL_SAMPLE_BUFFERS_ARB: u32 = 8257;
pub const WGL_SAMPLES_ARB: u32 = 8258;
pub const WGL_ARB_pbuffer: u32 = 1;
pub const WGL_DRAW_TO_PBUFFER_ARB: u32 = 8237;
pub const WGL_MAX_PBUFFER_PIXELS_ARB: u32 = 8238;
pub const WGL_MAX_PBUFFER_WIDTH_ARB: u32 = 8239;
pub const WGL_MAX_PBUFFER_HEIGHT_ARB: u32 = 8240;
pub const WGL_PBUFFER_LARGEST_ARB: u32 = 8243;
pub const WGL_PBUFFER_WIDTH_ARB: u32 = 8244;
pub const WGL_PBUFFER_HEIGHT_ARB: u32 = 8245;
pub const WGL_PBUFFER_LOST_ARB: u32 = 8246;
pub const WGL_ARB_pixel_format: u32 = 1;
pub const WGL_NUMBER_PIXEL_FORMATS_ARB: u32 = 8192;
pub const WGL_DRAW_TO_WINDOW_ARB: u32 = 8193;
pub const WGL_DRAW_TO_BITMAP_ARB: u32 = 8194;
pub const WGL_ACCELERATION_ARB: u32 = 8195;
pub const WGL_NEED_PALETTE_ARB: u32 = 8196;
pub const WGL_NEED_SYSTEM_PALETTE_ARB: u32 = 8197;
pub const WGL_SWAP_LAYER_BUFFERS_ARB: u32 = 8198;
pub const WGL_SWAP_METHOD_ARB: u32 = 8199;
pub const WGL_NUMBER_OVERLAYS_ARB: u32 = 8200;
pub const WGL_NUMBER_UNDERLAYS_ARB: u32 = 8201;
pub const WGL_TRANSPARENT_ARB: u32 = 8202;
pub const WGL_TRANSPARENT_RED_VALUE_ARB: u32 = 8247;
pub const WGL_TRANSPARENT_GREEN_VALUE_ARB: u32 = 8248;
pub const WGL_TRANSPARENT_BLUE_VALUE_ARB: u32 = 8249;
pub const WGL_TRANSPARENT_ALPHA_VALUE_ARB: u32 = 8250;
pub const WGL_TRANSPARENT_INDEX_VALUE_ARB: u32 = 8251;
pub const WGL_SHARE_DEPTH_ARB: u32 = 8204;
pub const WGL_SHARE_STENCIL_ARB: u32 = 8205;
pub const WGL_SHARE_ACCUM_ARB: u32 = 8206;
pub const WGL_SUPPORT_GDI_ARB: u32 = 8207;
pub const WGL_SUPPORT_OPENGL_ARB: u32 = 8208;
pub const WGL_DOUBLE_BUFFER_ARB: u32 = 8209;
pub const WGL_STEREO_ARB: u32 = 8210;
pub const WGL_PIXEL_TYPE_ARB: u32 = 8211;
pub const WGL_COLOR_BITS_ARB: u32 = 8212;
pub const WGL_RED_BITS_ARB: u32 = 8213;
pub const WGL_RED_SHIFT_ARB: u32 = 8214;
pub const WGL_GREEN_BITS_ARB: u32 = 8215;
pub const WGL_GREEN_SHIFT_ARB: u32 = 8216;
pub const WGL_BLUE_BITS_ARB: u32 = 8217;
pub const WGL_BLUE_SHIFT_ARB: u32 = 8218;
pub const WGL_ALPHA_BITS_ARB: u32 = 8219;
pub const WGL_ALPHA_SHIFT_ARB: u32 = 8220;
pub const WGL_ACCUM_BITS_ARB: u32 = 8221;
pub const WGL_ACCUM_RED_BITS_ARB: u32 = 8222;
pub const WGL_ACCUM_GREEN_BITS_ARB: u32 = 8223;
pub const WGL_ACCUM_BLUE_BITS_ARB: u32 = 8224;
pub const WGL_ACCUM_ALPHA_BITS_ARB: u32 = 8225;
pub const WGL_DEPTH_BITS_ARB: u32 = 8226;
pub const WGL_STENCIL_BITS_ARB: u32 = 8227;
pub const WGL_AUX_BUFFERS_ARB: u32 = 8228;
pub const WGL_NO_ACCELERATION_ARB: u32 = 8229;
pub const WGL_GENERIC_ACCELERATION_ARB: u32 = 8230;
pub const WGL_FULL_ACCELERATION_ARB: u32 = 8231;
pub const WGL_SWAP_EXCHANGE_ARB: u32 = 8232;
pub const WGL_SWAP_COPY_ARB: u32 = 8233;
pub const WGL_SWAP_UNDEFINED_ARB: u32 = 8234;
pub const WGL_TYPE_RGBA_ARB: u32 = 8235;
pub const WGL_TYPE_COLORINDEX_ARB: u32 = 8236;
pub const WGL_ARB_pixel_format_float: u32 = 1;
pub const WGL_TYPE_RGBA_FLOAT_ARB: u32 = 8608;
pub const WGL_ARB_render_texture: u32 = 1;
pub const WGL_BIND_TO_TEXTURE_RGB_ARB: u32 = 8304;
pub const WGL_BIND_TO_TEXTURE_RGBA_ARB: u32 = 8305;
pub const WGL_TEXTURE_FORMAT_ARB: u32 = 8306;
pub const WGL_TEXTURE_TARGET_ARB: u32 = 8307;
pub const WGL_MIPMAP_TEXTURE_ARB: u32 = 8308;
pub const WGL_TEXTURE_RGB_ARB: u32 = 8309;
pub const WGL_TEXTURE_RGBA_ARB: u32 = 8310;
pub const WGL_NO_TEXTURE_ARB: u32 = 8311;
pub const WGL_TEXTURE_CUBE_MAP_ARB: u32 = 8312;
pub const WGL_TEXTURE_1D_ARB: u32 = 8313;
pub const WGL_TEXTURE_2D_ARB: u32 = 8314;
pub const WGL_MIPMAP_LEVEL_ARB: u32 = 8315;
pub const WGL_CUBE_MAP_FACE_ARB: u32 = 8316;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 8317;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 8318;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 8319;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 8320;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 8321;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 8322;
pub const WGL_FRONT_LEFT_ARB: u32 = 8323;
pub const WGL_FRONT_RIGHT_ARB: u32 = 8324;
pub const WGL_BACK_LEFT_ARB: u32 = 8325;
pub const WGL_BACK_RIGHT_ARB: u32 = 8326;
pub const WGL_AUX0_ARB: u32 = 8327;
pub const WGL_AUX1_ARB: u32 = 8328;
pub const WGL_AUX2_ARB: u32 = 8329;
pub const WGL_AUX3_ARB: u32 = 8330;
pub const WGL_AUX4_ARB: u32 = 8331;
pub const WGL_AUX5_ARB: u32 = 8332;
pub const WGL_AUX6_ARB: u32 = 8333;
pub const WGL_AUX7_ARB: u32 = 8334;
pub const WGL_AUX8_ARB: u32 = 8335;
pub const WGL_AUX9_ARB: u32 = 8336;
pub const WGL_ARB_robustness_application_isolation: u32 = 1;
pub const WGL_CONTEXT_RESET_ISOLATION_BIT_ARB: u32 = 8;
pub const WGL_ARB_robustness_share_group_isolation: u32 = 1;
pub const WGL_3DFX_multisample: u32 = 1;
pub const WGL_SAMPLE_BUFFERS_3DFX: u32 = 8288;
pub const WGL_SAMPLES_3DFX: u32 = 8289;
pub const WGL_3DL_stereo_control: u32 = 1;
pub const WGL_STEREO_EMITTER_ENABLE_3DL: u32 = 8277;
pub const WGL_STEREO_EMITTER_DISABLE_3DL: u32 = 8278;
pub const WGL_STEREO_POLARITY_NORMAL_3DL: u32 = 8279;
pub const WGL_STEREO_POLARITY_INVERT_3DL: u32 = 8280;
pub const WGL_AMD_gpu_association: u32 = 1;
pub const WGL_GPU_VENDOR_AMD: u32 = 7936;
pub const WGL_GPU_RENDERER_STRING_AMD: u32 = 7937;
pub const WGL_GPU_OPENGL_VERSION_STRING_AMD: u32 = 7938;
pub const WGL_GPU_FASTEST_TARGET_GPUS_AMD: u32 = 8610;
pub const WGL_GPU_RAM_AMD: u32 = 8611;
pub const WGL_GPU_CLOCK_AMD: u32 = 8612;
pub const WGL_GPU_NUM_PIPES_AMD: u32 = 8613;
pub const WGL_GPU_NUM_SIMD_AMD: u32 = 8614;
pub const WGL_GPU_NUM_RB_AMD: u32 = 8615;
pub const WGL_GPU_NUM_SPI_AMD: u32 = 8616;
pub const WGL_ATI_pixel_format_float: u32 = 1;
pub const WGL_TYPE_RGBA_FLOAT_ATI: u32 = 8608;
pub const WGL_ATI_render_texture_rectangle: u32 = 1;
pub const WGL_TEXTURE_RECTANGLE_ATI: u32 = 8613;
pub const WGL_EXT_colorspace: u32 = 1;
pub const WGL_COLORSPACE_EXT: u32 = 12445;
pub const WGL_COLORSPACE_SRGB_EXT: u32 = 12425;
pub const WGL_COLORSPACE_LINEAR_EXT: u32 = 12426;
pub const WGL_EXT_create_context_es2_profile: u32 = 1;
pub const WGL_CONTEXT_ES2_PROFILE_BIT_EXT: u32 = 4;
pub const WGL_EXT_create_context_es_profile: u32 = 1;
pub const WGL_CONTEXT_ES_PROFILE_BIT_EXT: u32 = 4;
pub const WGL_EXT_depth_float: u32 = 1;
pub const WGL_DEPTH_FLOAT_EXT: u32 = 8256;
pub const WGL_EXT_display_color_table: u32 = 1;
pub const WGL_EXT_extensions_string: u32 = 1;
pub const WGL_EXT_framebuffer_sRGB: u32 = 1;
pub const WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 8361;
pub const WGL_EXT_make_current_read: u32 = 1;
pub const ERROR_INVALID_PIXEL_TYPE_EXT: u32 = 8259;
pub const WGL_EXT_multisample: u32 = 1;
pub const WGL_SAMPLE_BUFFERS_EXT: u32 = 8257;
pub const WGL_SAMPLES_EXT: u32 = 8258;
pub const WGL_EXT_pbuffer: u32 = 1;
pub const WGL_DRAW_TO_PBUFFER_EXT: u32 = 8237;
pub const WGL_MAX_PBUFFER_PIXELS_EXT: u32 = 8238;
pub const WGL_MAX_PBUFFER_WIDTH_EXT: u32 = 8239;
pub const WGL_MAX_PBUFFER_HEIGHT_EXT: u32 = 8240;
pub const WGL_OPTIMAL_PBUFFER_WIDTH_EXT: u32 = 8241;
pub const WGL_OPTIMAL_PBUFFER_HEIGHT_EXT: u32 = 8242;
pub const WGL_PBUFFER_LARGEST_EXT: u32 = 8243;
pub const WGL_PBUFFER_WIDTH_EXT: u32 = 8244;
pub const WGL_PBUFFER_HEIGHT_EXT: u32 = 8245;
pub const WGL_EXT_pixel_format: u32 = 1;
pub const WGL_NUMBER_PIXEL_FORMATS_EXT: u32 = 8192;
pub const WGL_DRAW_TO_WINDOW_EXT: u32 = 8193;
pub const WGL_DRAW_TO_BITMAP_EXT: u32 = 8194;
pub const WGL_ACCELERATION_EXT: u32 = 8195;
pub const WGL_NEED_PALETTE_EXT: u32 = 8196;
pub const WGL_NEED_SYSTEM_PALETTE_EXT: u32 = 8197;
pub const WGL_SWAP_LAYER_BUFFERS_EXT: u32 = 8198;
pub const WGL_SWAP_METHOD_EXT: u32 = 8199;
pub const WGL_NUMBER_OVERLAYS_EXT: u32 = 8200;
pub const WGL_NUMBER_UNDERLAYS_EXT: u32 = 8201;
pub const WGL_TRANSPARENT_EXT: u32 = 8202;
pub const WGL_TRANSPARENT_VALUE_EXT: u32 = 8203;
pub const WGL_SHARE_DEPTH_EXT: u32 = 8204;
pub const WGL_SHARE_STENCIL_EXT: u32 = 8205;
pub const WGL_SHARE_ACCUM_EXT: u32 = 8206;
pub const WGL_SUPPORT_GDI_EXT: u32 = 8207;
pub const WGL_SUPPORT_OPENGL_EXT: u32 = 8208;
pub const WGL_DOUBLE_BUFFER_EXT: u32 = 8209;
pub const WGL_STEREO_EXT: u32 = 8210;
pub const WGL_PIXEL_TYPE_EXT: u32 = 8211;
pub const WGL_COLOR_BITS_EXT: u32 = 8212;
pub const WGL_RED_BITS_EXT: u32 = 8213;
pub const WGL_RED_SHIFT_EXT: u32 = 8214;
pub const WGL_GREEN_BITS_EXT: u32 = 8215;
pub const WGL_GREEN_SHIFT_EXT: u32 = 8216;
pub const WGL_BLUE_BITS_EXT: u32 = 8217;
pub const WGL_BLUE_SHIFT_EXT: u32 = 8218;
pub const WGL_ALPHA_BITS_EXT: u32 = 8219;
pub const WGL_ALPHA_SHIFT_EXT: u32 = 8220;
pub const WGL_ACCUM_BITS_EXT: u32 = 8221;
pub const WGL_ACCUM_RED_BITS_EXT: u32 = 8222;
pub const WGL_ACCUM_GREEN_BITS_EXT: u32 = 8223;
pub const WGL_ACCUM_BLUE_BITS_EXT: u32 = 8224;
pub const WGL_ACCUM_ALPHA_BITS_EXT: u32 = 8225;
pub const WGL_DEPTH_BITS_EXT: u32 = 8226;
pub const WGL_STENCIL_BITS_EXT: u32 = 8227;
pub const WGL_AUX_BUFFERS_EXT: u32 = 8228;
pub const WGL_NO_ACCELERATION_EXT: u32 = 8229;
pub const WGL_GENERIC_ACCELERATION_EXT: u32 = 8230;
pub const WGL_FULL_ACCELERATION_EXT: u32 = 8231;
pub const WGL_SWAP_EXCHANGE_EXT: u32 = 8232;
pub const WGL_SWAP_COPY_EXT: u32 = 8233;
pub const WGL_SWAP_UNDEFINED_EXT: u32 = 8234;
pub const WGL_TYPE_RGBA_EXT: u32 = 8235;
pub const WGL_TYPE_COLORINDEX_EXT: u32 = 8236;
pub const WGL_EXT_pixel_format_packed_float: u32 = 1;
pub const WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT: u32 = 8360;
pub const WGL_EXT_swap_control: u32 = 1;
pub const WGL_EXT_swap_control_tear: u32 = 1;
pub const WGL_I3D_digital_video_control: u32 = 1;
pub const WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D: u32 = 8272;
pub const WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D: u32 = 8273;
pub const WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D: u32 = 8274;
pub const WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D: u32 = 8275;
pub const WGL_I3D_gamma: u32 = 1;
pub const WGL_GAMMA_TABLE_SIZE_I3D: u32 = 8270;
pub const WGL_GAMMA_EXCLUDE_DESKTOP_I3D: u32 = 8271;
pub const WGL_I3D_genlock: u32 = 1;
pub const WGL_GENLOCK_SOURCE_MULTIVIEW_I3D: u32 = 8260;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D: u32 = 8261;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D: u32 = 8262;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D: u32 = 8263;
pub const WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D: u32 = 8264;
pub const WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D: u32 = 8265;
pub const WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D: u32 = 8266;
pub const WGL_GENLOCK_SOURCE_EDGE_RISING_I3D: u32 = 8267;
pub const WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D: u32 = 8268;
pub const WGL_I3D_image_buffer: u32 = 1;
pub const WGL_IMAGE_BUFFER_MIN_ACCESS_I3D: u32 = 1;
pub const WGL_IMAGE_BUFFER_LOCK_I3D: u32 = 2;
pub const WGL_I3D_swap_frame_lock: u32 = 1;
pub const WGL_I3D_swap_frame_usage: u32 = 1;
pub const WGL_NV_DX_interop: u32 = 1;
pub const WGL_ACCESS_READ_ONLY_NV: u32 = 0;
pub const WGL_ACCESS_READ_WRITE_NV: u32 = 1;
pub const WGL_ACCESS_WRITE_DISCARD_NV: u32 = 2;
pub const WGL_NV_DX_interop2: u32 = 1;
pub const WGL_NV_copy_image: u32 = 1;
pub const WGL_NV_delay_before_swap: u32 = 1;
pub const WGL_NV_float_buffer: u32 = 1;
pub const WGL_FLOAT_COMPONENTS_NV: u32 = 8368;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV: u32 = 8369;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV: u32 = 8370;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV: u32 = 8371;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV: u32 = 8372;
pub const WGL_TEXTURE_FLOAT_R_NV: u32 = 8373;
pub const WGL_TEXTURE_FLOAT_RG_NV: u32 = 8374;
pub const WGL_TEXTURE_FLOAT_RGB_NV: u32 = 8375;
pub const WGL_TEXTURE_FLOAT_RGBA_NV: u32 = 8376;
pub const WGL_NV_gpu_affinity: u32 = 1;
pub const ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV: u32 = 8400;
pub const ERROR_MISSING_AFFINITY_MASK_NV: u32 = 8401;
pub const WGL_NV_multigpu_context: u32 = 1;
pub const WGL_CONTEXT_MULTIGPU_ATTRIB_NV: u32 = 8362;
pub const WGL_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV: u32 = 8363;
pub const WGL_CONTEXT_MULTIGPU_ATTRIB_AFR_NV: u32 = 8364;
pub const WGL_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV: u32 = 8365;
pub const WGL_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV: u32 = 8366;
pub const WGL_NV_multisample_coverage: u32 = 1;
pub const WGL_COVERAGE_SAMPLES_NV: u32 = 8258;
pub const WGL_COLOR_SAMPLES_NV: u32 = 8377;
pub const WGL_NV_present_video: u32 = 1;
pub const WGL_NUM_VIDEO_SLOTS_NV: u32 = 8432;
pub const WGL_NV_render_depth_texture: u32 = 1;
pub const WGL_BIND_TO_TEXTURE_DEPTH_NV: u32 = 8355;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV: u32 = 8356;
pub const WGL_DEPTH_TEXTURE_FORMAT_NV: u32 = 8357;
pub const WGL_TEXTURE_DEPTH_COMPONENT_NV: u32 = 8358;
pub const WGL_DEPTH_COMPONENT_NV: u32 = 8359;
pub const WGL_NV_render_texture_rectangle: u32 = 1;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV: u32 = 8352;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV: u32 = 8353;
pub const WGL_TEXTURE_RECTANGLE_NV: u32 = 8354;
pub const WGL_NV_swap_group: u32 = 1;
pub const WGL_NV_vertex_array_range: u32 = 1;
pub const WGL_NV_video_capture: u32 = 1;
pub const WGL_UNIQUE_ID_NV: u32 = 8398;
pub const WGL_NUM_VIDEO_CAPTURE_SLOTS_NV: u32 = 8399;
pub const WGL_NV_video_output: u32 = 1;
pub const WGL_BIND_TO_VIDEO_RGB_NV: u32 = 8384;
pub const WGL_BIND_TO_VIDEO_RGBA_NV: u32 = 8385;
pub const WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV: u32 = 8386;
pub const WGL_VIDEO_OUT_COLOR_NV: u32 = 8387;
pub const WGL_VIDEO_OUT_ALPHA_NV: u32 = 8388;
pub const WGL_VIDEO_OUT_DEPTH_NV: u32 = 8389;
pub const WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV: u32 = 8390;
pub const WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV: u32 = 8391;
pub const WGL_VIDEO_OUT_FRAME: u32 = 8392;
pub const WGL_VIDEO_OUT_FIELD_1: u32 = 8393;
pub const WGL_VIDEO_OUT_FIELD_2: u32 = 8394;
pub const WGL_VIDEO_OUT_STACKED_FIELDS_1_2: u32 = 8395;
pub const WGL_VIDEO_OUT_STACKED_FIELDS_2_1: u32 = 8396;
pub const WGL_OML_sync_control: u32 = 1;
pub type USHORT = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type FLOAT = f32;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type INT32 = ::std::os::raw::c_int;
pub type INT64 = ::std::os::raw::c_longlong;
pub type CHAR = ::std::os::raw::c_char;
pub type LONG = ::std::os::raw::c_long;
pub type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HDC = *mut HDC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HGLRC__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HGLRC = *mut HGLRC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
pub type RECT = tagRECT;
pub type GLenum = ::std::os::raw::c_uint;
pub type khronos_uint16_t = ::std::os::raw::c_ushort;
pub type khronos_float_t = f32;
pub type GLfloat = khronos_float_t;
pub type GLint = ::std::os::raw::c_int;
pub type GLsizei = ::std::os::raw::c_int;
pub type GLbitfield = ::std::os::raw::c_uint;
pub type GLuint = ::std::os::raw::c_uint;
pub type GLboolean = ::std::os::raw::c_uchar;
pub type GLushort = khronos_uint16_t;
pub type PFNWGLCREATEBUFFERREGIONARBPROC = unsafe extern "C" fn(hDC: HDC, iLayerPlane: ::std::os::raw::c_int, uType: UINT) -> HANDLE;
pub type PFNWGLDELETEBUFFERREGIONARBPROC = unsafe extern "C" fn(hRegion: HANDLE);
pub type PFNWGLSAVEBUFFERREGIONARBPROC = unsafe extern "C" fn(
    hRegion: HANDLE,
    x: ::std::os::raw::c_int,
    y: ::std::os::raw::c_int,
    width: ::std::os::raw::c_int,
    height: ::std::os::raw::c_int,
) -> BOOL;
pub type PFNWGLRESTOREBUFFERREGIONARBPROC = unsafe extern "C" fn(
    hRegion: HANDLE,
    x: ::std::os::raw::c_int,
    y: ::std::os::raw::c_int,
    width: ::std::os::raw::c_int,
    height: ::std::os::raw::c_int,
    xSrc: ::std::os::raw::c_int,
    ySrc: ::std::os::raw::c_int,
) -> BOOL;
pub type PFNWGLCREATECONTEXTATTRIBSARBPROC = unsafe extern "C" fn(hDC: HDC, hShareContext: HGLRC, attribList: *const ::std::os::raw::c_int) -> HGLRC;
pub type PFNWGLGETEXTENSIONSSTRINGARBPROC = unsafe extern "C" fn(hdc: HDC) -> *const ::std::os::raw::c_char;
pub type PFNWGLMAKECONTEXTCURRENTARBPROC = unsafe extern "C" fn(hDrawDC: HDC, hReadDC: HDC, hglrc: HGLRC) -> BOOL;
pub type PFNWGLGETCURRENTREADDCARBPROC = unsafe extern "C" fn() -> HDC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPBUFFERARB__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HPBUFFERARB = *mut HPBUFFERARB__;
pub type PFNWGLCREATEPBUFFERARBPROC = unsafe extern "C" fn(
    hDC: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iWidth: ::std::os::raw::c_int,
    iHeight: ::std::os::raw::c_int,
    piAttribList: *const ::std::os::raw::c_int,
) -> HPBUFFERARB;
pub type PFNWGLGETPBUFFERDCARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB) -> HDC;
pub type PFNWGLRELEASEPBUFFERDCARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB, hDC: HDC) -> ::std::os::raw::c_int;
pub type PFNWGLDESTROYPBUFFERARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB) -> BOOL;
pub type PFNWGLQUERYPBUFFERARBPROC =
    unsafe extern "C" fn(hPbuffer: HPBUFFERARB, iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLGETPIXELFORMATATTRIBIVARBPROC = unsafe extern "C" fn(
    hdc: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iLayerPlane: ::std::os::raw::c_int,
    nAttributes: UINT,
    piAttributes: *const ::std::os::raw::c_int,
    piValues: *mut ::std::os::raw::c_int,
) -> BOOL;
pub type PFNWGLGETPIXELFORMATATTRIBFVARBPROC = unsafe extern "C" fn(
    hdc: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iLayerPlane: ::std::os::raw::c_int,
    nAttributes: UINT,
    piAttributes: *const ::std::os::raw::c_int,
    pfValues: *mut FLOAT,
) -> BOOL;
pub type PFNWGLCHOOSEPIXELFORMATARBPROC = unsafe extern "C" fn(
    hdc: HDC,
    piAttribIList: *const ::std::os::raw::c_int,
    pfAttribFList: *const FLOAT,
    nMaxFormats: UINT,
    piFormats: *mut ::std::os::raw::c_int,
    nNumFormats: *mut UINT,
) -> BOOL;
pub type PFNWGLBINDTEXIMAGEARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB, iBuffer: ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLRELEASETEXIMAGEARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB, iBuffer: ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLSETPBUFFERATTRIBARBPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB, piAttribList: *const ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLSETSTEREOEMITTERSTATE3DLPROC = unsafe extern "C" fn(hDC: HDC, uState: UINT) -> BOOL;
pub type PFNWGLGETGPUIDSAMDPROC = unsafe extern "C" fn(maxCount: UINT, ids: *mut UINT) -> UINT;
pub type PFNWGLGETGPUINFOAMDPROC = unsafe extern "C" fn(id: UINT, property: INT, dataType: GLenum, size: UINT, data: *mut ::std::os::raw::c_void) -> INT;
pub type PFNWGLGETCONTEXTGPUIDAMDPROC = unsafe extern "C" fn(hglrc: HGLRC) -> UINT;
pub type PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC = unsafe extern "C" fn(id: UINT) -> HGLRC;
pub type PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC = unsafe extern "C" fn(id: UINT, hShareContext: HGLRC, attribList: *const ::std::os::raw::c_int) -> HGLRC;
pub type PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC = unsafe extern "C" fn(hglrc: HGLRC) -> BOOL;
pub type PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC = unsafe extern "C" fn(hglrc: HGLRC) -> BOOL;
pub type PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC = unsafe extern "C" fn() -> HGLRC;
pub type PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC = unsafe extern "C" fn(
    dstCtx: HGLRC,
    srcX0: GLint,
    srcY0: GLint,
    srcX1: GLint,
    srcY1: GLint,
    dstX0: GLint,
    dstY0: GLint,
    dstX1: GLint,
    dstY1: GLint,
    mask: GLbitfield,
    filter: GLenum,
);
pub type PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC = unsafe extern "C" fn(id: GLushort) -> GLboolean;
pub type PFNWGLLOADDISPLAYCOLORTABLEEXTPROC = unsafe extern "C" fn(table: *const GLushort, length: GLuint) -> GLboolean;
pub type PFNWGLBINDDISPLAYCOLORTABLEEXTPROC = unsafe extern "C" fn(id: GLushort) -> GLboolean;
pub type PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC = unsafe extern "C" fn(id: GLushort);
pub type PFNWGLGETEXTENSIONSSTRINGEXTPROC = unsafe extern "C" fn() -> *const ::std::os::raw::c_char;
pub type PFNWGLMAKECONTEXTCURRENTEXTPROC = unsafe extern "C" fn(hDrawDC: HDC, hReadDC: HDC, hglrc: HGLRC) -> BOOL;
pub type PFNWGLGETCURRENTREADDCEXTPROC = unsafe extern "C" fn() -> HDC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPBUFFEREXT__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HPBUFFEREXT = *mut HPBUFFEREXT__;
pub type PFNWGLCREATEPBUFFEREXTPROC = unsafe extern "C" fn(
    hDC: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iWidth: ::std::os::raw::c_int,
    iHeight: ::std::os::raw::c_int,
    piAttribList: *const ::std::os::raw::c_int,
) -> HPBUFFEREXT;
pub type PFNWGLGETPBUFFERDCEXTPROC = unsafe extern "C" fn(hPbuffer: HPBUFFEREXT) -> HDC;
pub type PFNWGLRELEASEPBUFFERDCEXTPROC = unsafe extern "C" fn(hPbuffer: HPBUFFEREXT, hDC: HDC) -> ::std::os::raw::c_int;
pub type PFNWGLDESTROYPBUFFEREXTPROC = unsafe extern "C" fn(hPbuffer: HPBUFFEREXT) -> BOOL;
pub type PFNWGLQUERYPBUFFEREXTPROC =
    unsafe extern "C" fn(hPbuffer: HPBUFFEREXT, iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLGETPIXELFORMATATTRIBIVEXTPROC = unsafe extern "C" fn(
    hdc: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iLayerPlane: ::std::os::raw::c_int,
    nAttributes: UINT,
    piAttributes: *mut ::std::os::raw::c_int,
    piValues: *mut ::std::os::raw::c_int,
) -> BOOL;
pub type PFNWGLGETPIXELFORMATATTRIBFVEXTPROC = unsafe extern "C" fn(
    hdc: HDC,
    iPixelFormat: ::std::os::raw::c_int,
    iLayerPlane: ::std::os::raw::c_int,
    nAttributes: UINT,
    piAttributes: *mut ::std::os::raw::c_int,
    pfValues: *mut FLOAT,
) -> BOOL;
pub type PFNWGLCHOOSEPIXELFORMATEXTPROC = unsafe extern "C" fn(
    hdc: HDC,
    piAttribIList: *const ::std::os::raw::c_int,
    pfAttribFList: *const FLOAT,
    nMaxFormats: UINT,
    piFormats: *mut ::std::os::raw::c_int,
    nNumFormats: *mut UINT,
) -> BOOL;
pub type PFNWGLSWAPINTERVALEXTPROC = unsafe extern "C" fn(interval: ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLGETSWAPINTERVALEXTPROC = unsafe extern "C" fn() -> ::std::os::raw::c_int;
pub type PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC =
    unsafe extern "C" fn(hDC: HDC, iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC =
    unsafe extern "C" fn(hDC: HDC, iAttribute: ::std::os::raw::c_int, piValue: *const ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLGETGAMMATABLEPARAMETERSI3DPROC = unsafe extern "C" fn(hDC: HDC, iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLSETGAMMATABLEPARAMETERSI3DPROC =
    unsafe extern "C" fn(hDC: HDC, iAttribute: ::std::os::raw::c_int, piValue: *const ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLGETGAMMATABLEI3DPROC =
    unsafe extern "C" fn(hDC: HDC, iEntries: ::std::os::raw::c_int, puRed: *mut USHORT, puGreen: *mut USHORT, puBlue: *mut USHORT) -> BOOL;
pub type PFNWGLSETGAMMATABLEI3DPROC =
    unsafe extern "C" fn(hDC: HDC, iEntries: ::std::os::raw::c_int, puRed: *const USHORT, puGreen: *const USHORT, puBlue: *const USHORT) -> BOOL;
pub type PFNWGLENABLEGENLOCKI3DPROC = unsafe extern "C" fn(hDC: HDC) -> BOOL;
pub type PFNWGLDISABLEGENLOCKI3DPROC = unsafe extern "C" fn(hDC: HDC) -> BOOL;
pub type PFNWGLISENABLEDGENLOCKI3DPROC = unsafe extern "C" fn(hDC: HDC, pFlag: *mut BOOL) -> BOOL;
pub type PFNWGLGENLOCKSOURCEI3DPROC = unsafe extern "C" fn(hDC: HDC, uSource: UINT) -> BOOL;
pub type PFNWGLGETGENLOCKSOURCEI3DPROC = unsafe extern "C" fn(hDC: HDC, uSource: *mut UINT) -> BOOL;
pub type PFNWGLGENLOCKSOURCEEDGEI3DPROC = unsafe extern "C" fn(hDC: HDC, uEdge: UINT) -> BOOL;
pub type PFNWGLGETGENLOCKSOURCEEDGEI3DPROC = unsafe extern "C" fn(hDC: HDC, uEdge: *mut UINT) -> BOOL;
pub type PFNWGLGENLOCKSAMPLERATEI3DPROC = unsafe extern "C" fn(hDC: HDC, uRate: UINT) -> BOOL;
pub type PFNWGLGETGENLOCKSAMPLERATEI3DPROC = unsafe extern "C" fn(hDC: HDC, uRate: *mut UINT) -> BOOL;
pub type PFNWGLGENLOCKSOURCEDELAYI3DPROC = unsafe extern "C" fn(hDC: HDC, uDelay: UINT) -> BOOL;
pub type PFNWGLGETGENLOCKSOURCEDELAYI3DPROC = unsafe extern "C" fn(hDC: HDC, uDelay: *mut UINT) -> BOOL;
pub type PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC = unsafe extern "C" fn(hDC: HDC, uMaxLineDelay: *mut UINT, uMaxPixelDelay: *mut UINT) -> BOOL;
pub type PFNWGLCREATEIMAGEBUFFERI3DPROC = unsafe extern "C" fn(hDC: HDC, dwSize: DWORD, uFlags: UINT) -> LPVOID;
pub type PFNWGLDESTROYIMAGEBUFFERI3DPROC = unsafe extern "C" fn(hDC: HDC, pAddress: LPVOID) -> BOOL;
pub type PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC =
    unsafe extern "C" fn(hDC: HDC, pEvent: *const HANDLE, pAddress: *const LPVOID, pSize: *const DWORD, count: UINT) -> BOOL;
pub type PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC = unsafe extern "C" fn(hDC: HDC, pAddress: *const LPVOID, count: UINT) -> BOOL;
pub type PFNWGLENABLEFRAMELOCKI3DPROC = unsafe extern "C" fn() -> BOOL;
pub type PFNWGLDISABLEFRAMELOCKI3DPROC = unsafe extern "C" fn() -> BOOL;
pub type PFNWGLISENABLEDFRAMELOCKI3DPROC = unsafe extern "C" fn(pFlag: *mut BOOL) -> BOOL;
pub type PFNWGLQUERYFRAMELOCKMASTERI3DPROC = unsafe extern "C" fn(pFlag: *mut BOOL) -> BOOL;
pub type PFNWGLGETFRAMEUSAGEI3DPROC = unsafe extern "C" fn(pUsage: *mut f32) -> BOOL;
pub type PFNWGLBEGINFRAMETRACKINGI3DPROC = unsafe extern "C" fn() -> BOOL;
pub type PFNWGLENDFRAMETRACKINGI3DPROC = unsafe extern "C" fn() -> BOOL;
pub type PFNWGLQUERYFRAMETRACKINGI3DPROC = unsafe extern "C" fn(pFrameCount: *mut DWORD, pMissedFrames: *mut DWORD, pLastMissedUsage: *mut f32) -> BOOL;
pub type PFNWGLDXSETRESOURCESHAREHANDLENVPROC = unsafe extern "C" fn(dxObject: *mut ::std::os::raw::c_void, shareHandle: HANDLE) -> BOOL;
pub type PFNWGLDXOPENDEVICENVPROC = unsafe extern "C" fn(dxDevice: *mut ::std::os::raw::c_void) -> HANDLE;
pub type PFNWGLDXCLOSEDEVICENVPROC = unsafe extern "C" fn(hDevice: HANDLE) -> BOOL;
pub type PFNWGLDXREGISTEROBJECTNVPROC =
    unsafe extern "C" fn(hDevice: HANDLE, dxObject: *mut ::std::os::raw::c_void, name: GLuint, type_: GLenum, access: GLenum) -> HANDLE;
pub type PFNWGLDXUNREGISTEROBJECTNVPROC = unsafe extern "C" fn(hDevice: HANDLE, hObject: HANDLE) -> BOOL;
pub type PFNWGLDXOBJECTACCESSNVPROC = unsafe extern "C" fn(hObject: HANDLE, access: GLenum) -> BOOL;
pub type PFNWGLDXLOCKOBJECTSNVPROC = unsafe extern "C" fn(hDevice: HANDLE, count: GLint, hObjects: *mut HANDLE) -> BOOL;
pub type PFNWGLDXUNLOCKOBJECTSNVPROC = unsafe extern "C" fn(hDevice: HANDLE, count: GLint, hObjects: *mut HANDLE) -> BOOL;
pub type PFNWGLCOPYIMAGESUBDATANVPROC = unsafe extern "C" fn(
    hSrcRC: HGLRC,
    srcName: GLuint,
    srcTarget: GLenum,
    srcLevel: GLint,
    srcX: GLint,
    srcY: GLint,
    srcZ: GLint,
    hDstRC: HGLRC,
    dstName: GLuint,
    dstTarget: GLenum,
    dstLevel: GLint,
    dstX: GLint,
    dstY: GLint,
    dstZ: GLint,
    width: GLsizei,
    height: GLsizei,
    depth: GLsizei,
) -> BOOL;
pub type PFNWGLDELAYBEFORESWAPNVPROC = unsafe extern "C" fn(hDC: HDC, seconds: GLfloat) -> BOOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HGPUNV__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HGPUNV = *mut HGPUNV__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPU_DEVICE {
    pub cb: DWORD,
    pub DeviceName: [CHAR; 32usize],
    pub DeviceString: [CHAR; 128usize],
    pub Flags: DWORD,
    pub rcVirtualScreen: RECT,
}
pub type PGPU_DEVICE = *mut _GPU_DEVICE;
pub type PFNWGLENUMGPUSNVPROC = unsafe extern "C" fn(iGpuIndex: UINT, phGpu: *mut HGPUNV) -> BOOL;
pub type PFNWGLENUMGPUDEVICESNVPROC = unsafe extern "C" fn(hGpu: HGPUNV, iDeviceIndex: UINT, lpGpuDevice: PGPU_DEVICE) -> BOOL;
pub type PFNWGLCREATEAFFINITYDCNVPROC = unsafe extern "C" fn(phGpuList: *const HGPUNV) -> HDC;
pub type PFNWGLENUMGPUSFROMAFFINITYDCNVPROC = unsafe extern "C" fn(hAffinityDC: HDC, iGpuIndex: UINT, hGpu: *mut HGPUNV) -> BOOL;
pub type PFNWGLDELETEDCNVPROC = unsafe extern "C" fn(hdc: HDC) -> BOOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HVIDEOOUTPUTDEVICENV__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HVIDEOOUTPUTDEVICENV = *mut HVIDEOOUTPUTDEVICENV__;
pub type PFNWGLENUMERATEVIDEODEVICESNVPROC = unsafe extern "C" fn(hDc: HDC, phDeviceList: *mut HVIDEOOUTPUTDEVICENV) -> ::std::os::raw::c_int;
pub type PFNWGLBINDVIDEODEVICENVPROC =
    unsafe extern "C" fn(hDc: HDC, uVideoSlot: ::std::os::raw::c_uint, hVideoDevice: HVIDEOOUTPUTDEVICENV, piAttribList: *const ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLQUERYCURRENTCONTEXTNVPROC = unsafe extern "C" fn(iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLJOINSWAPGROUPNVPROC = unsafe extern "C" fn(hDC: HDC, group: GLuint) -> BOOL;
pub type PFNWGLBINDSWAPBARRIERNVPROC = unsafe extern "C" fn(group: GLuint, barrier: GLuint) -> BOOL;
pub type PFNWGLQUERYSWAPGROUPNVPROC = unsafe extern "C" fn(hDC: HDC, group: *mut GLuint, barrier: *mut GLuint) -> BOOL;
pub type PFNWGLQUERYMAXSWAPGROUPSNVPROC = unsafe extern "C" fn(hDC: HDC, maxGroups: *mut GLuint, maxBarriers: *mut GLuint) -> BOOL;
pub type PFNWGLQUERYFRAMECOUNTNVPROC = unsafe extern "C" fn(hDC: HDC, count: *mut GLuint) -> BOOL;
pub type PFNWGLRESETFRAMECOUNTNVPROC = unsafe extern "C" fn(hDC: HDC) -> BOOL;
pub type PFNWGLALLOCATEMEMORYNVPROC =
    unsafe extern "C" fn(size: GLsizei, readfreq: GLfloat, writefreq: GLfloat, priority: GLfloat) -> *mut ::std::os::raw::c_void;
pub type PFNWGLFREEMEMORYNVPROC = unsafe extern "C" fn(pointer: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HVIDEOINPUTDEVICENV__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HVIDEOINPUTDEVICENV = *mut HVIDEOINPUTDEVICENV__;
pub type PFNWGLBINDVIDEOCAPTUREDEVICENVPROC = unsafe extern "C" fn(uVideoSlot: UINT, hDevice: HVIDEOINPUTDEVICENV) -> BOOL;
pub type PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC = unsafe extern "C" fn(hDc: HDC, phDeviceList: *mut HVIDEOINPUTDEVICENV) -> UINT;
pub type PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC = unsafe extern "C" fn(hDc: HDC, hDevice: HVIDEOINPUTDEVICENV) -> BOOL;
pub type PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC =
    unsafe extern "C" fn(hDc: HDC, hDevice: HVIDEOINPUTDEVICENV, iAttribute: ::std::os::raw::c_int, piValue: *mut ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC = unsafe extern "C" fn(hDc: HDC, hDevice: HVIDEOINPUTDEVICENV) -> BOOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPVIDEODEV__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HPVIDEODEV = *mut HPVIDEODEV__;
pub type PFNWGLGETVIDEODEVICENVPROC = unsafe extern "C" fn(hDC: HDC, numDevices: ::std::os::raw::c_int, hVideoDevice: *mut HPVIDEODEV) -> BOOL;
pub type PFNWGLRELEASEVIDEODEVICENVPROC = unsafe extern "C" fn(hVideoDevice: HPVIDEODEV) -> BOOL;
pub type PFNWGLBINDVIDEOIMAGENVPROC = unsafe extern "C" fn(hVideoDevice: HPVIDEODEV, hPbuffer: HPBUFFERARB, iVideoBuffer: ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLRELEASEVIDEOIMAGENVPROC = unsafe extern "C" fn(hPbuffer: HPBUFFERARB, iVideoBuffer: ::std::os::raw::c_int) -> BOOL;
pub type PFNWGLSENDPBUFFERTOVIDEONVPROC =
    unsafe extern "C" fn(hPbuffer: HPBUFFERARB, iBufferType: ::std::os::raw::c_int, pulCounterPbuffer: *mut ::std::os::raw::c_ulong, bBlock: BOOL) -> BOOL;
pub type PFNWGLGETVIDEOINFONVPROC = unsafe extern "C" fn(
    hpVideoDevice: HPVIDEODEV,
    pulCounterOutputPbuffer: *mut ::std::os::raw::c_ulong,
    pulCounterOutputVideo: *mut ::std::os::raw::c_ulong,
) -> BOOL;
pub type PFNWGLGETSYNCVALUESOMLPROC = unsafe extern "C" fn(hdc: HDC, ust: *mut INT64, msc: *mut INT64, sbc: *mut INT64) -> BOOL;
pub type PFNWGLGETMSCRATEOMLPROC = unsafe extern "C" fn(hdc: HDC, numerator: *mut INT32, denominator: *mut INT32) -> BOOL;
pub type PFNWGLSWAPBUFFERSMSCOMLPROC = unsafe extern "C" fn(hdc: HDC, target_msc: INT64, divisor: INT64, remainder: INT64) -> INT64;
pub type PFNWGLSWAPLAYERBUFFERSMSCOMLPROC = unsafe extern "C" fn(hdc: HDC, fuPlanes: INT, target_msc: INT64, divisor: INT64, remainder: INT64) -> INT64;
pub type PFNWGLWAITFORMSCOMLPROC =
    unsafe extern "C" fn(hdc: HDC, target_msc: INT64, divisor: INT64, remainder: INT64, ust: *mut INT64, msc: *mut INT64, sbc: *mut INT64) -> BOOL;
pub type PFNWGLWAITFORSBCOMLPROC = unsafe extern "C" fn(hdc: HDC, target_sbc: INT64, ust: *mut INT64, msc: *mut INT64, sbc: *mut INT64) -> BOOL;

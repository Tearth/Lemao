/* automatically generated by rust-bindgen 0.62.0 */

pub const GLX_VERSION_1_1: u32 = 1;
pub const GLX_VERSION_1_2: u32 = 1;
pub const GLX_VERSION_1_3: u32 = 1;
pub const GLX_VERSION_1_4: u32 = 1;
pub const GLX_EXTENSION_NAME: &[u8; 4usize] = b"GLX\0";
pub const GLX_USE_GL: u32 = 1;
pub const GLX_BUFFER_SIZE: u32 = 2;
pub const GLX_LEVEL: u32 = 3;
pub const GLX_RGBA: u32 = 4;
pub const GLX_DOUBLEBUFFER: u32 = 5;
pub const GLX_STEREO: u32 = 6;
pub const GLX_AUX_BUFFERS: u32 = 7;
pub const GLX_RED_SIZE: u32 = 8;
pub const GLX_GREEN_SIZE: u32 = 9;
pub const GLX_BLUE_SIZE: u32 = 10;
pub const GLX_ALPHA_SIZE: u32 = 11;
pub const GLX_DEPTH_SIZE: u32 = 12;
pub const GLX_STENCIL_SIZE: u32 = 13;
pub const GLX_ACCUM_RED_SIZE: u32 = 14;
pub const GLX_ACCUM_GREEN_SIZE: u32 = 15;
pub const GLX_ACCUM_BLUE_SIZE: u32 = 16;
pub const GLX_ACCUM_ALPHA_SIZE: u32 = 17;
pub const GLX_BAD_SCREEN: u32 = 1;
pub const GLX_BAD_ATTRIBUTE: u32 = 2;
pub const GLX_NO_EXTENSION: u32 = 3;
pub const GLX_BAD_VISUAL: u32 = 4;
pub const GLX_BAD_CONTEXT: u32 = 5;
pub const GLX_BAD_VALUE: u32 = 6;
pub const GLX_BAD_ENUM: u32 = 7;
pub const GLX_VENDOR: u32 = 1;
pub const GLX_VERSION: u32 = 2;
pub const GLX_EXTENSIONS: u32 = 3;
pub const GLX_CONFIG_CAVEAT: u32 = 32;
pub const GLX_DONT_CARE: u32 = 4294967295;
pub const GLX_X_VISUAL_TYPE: u32 = 34;
pub const GLX_TRANSPARENT_TYPE: u32 = 35;
pub const GLX_TRANSPARENT_INDEX_VALUE: u32 = 36;
pub const GLX_TRANSPARENT_RED_VALUE: u32 = 37;
pub const GLX_TRANSPARENT_GREEN_VALUE: u32 = 38;
pub const GLX_TRANSPARENT_BLUE_VALUE: u32 = 39;
pub const GLX_TRANSPARENT_ALPHA_VALUE: u32 = 40;
pub const GLX_WINDOW_BIT: u32 = 1;
pub const GLX_PIXMAP_BIT: u32 = 2;
pub const GLX_PBUFFER_BIT: u32 = 4;
pub const GLX_AUX_BUFFERS_BIT: u32 = 16;
pub const GLX_FRONT_LEFT_BUFFER_BIT: u32 = 1;
pub const GLX_FRONT_RIGHT_BUFFER_BIT: u32 = 2;
pub const GLX_BACK_LEFT_BUFFER_BIT: u32 = 4;
pub const GLX_BACK_RIGHT_BUFFER_BIT: u32 = 8;
pub const GLX_DEPTH_BUFFER_BIT: u32 = 32;
pub const GLX_STENCIL_BUFFER_BIT: u32 = 64;
pub const GLX_ACCUM_BUFFER_BIT: u32 = 128;
pub const GLX_NONE: u32 = 32768;
pub const GLX_SLOW_CONFIG: u32 = 32769;
pub const GLX_TRUE_COLOR: u32 = 32770;
pub const GLX_DIRECT_COLOR: u32 = 32771;
pub const GLX_PSEUDO_COLOR: u32 = 32772;
pub const GLX_STATIC_COLOR: u32 = 32773;
pub const GLX_GRAY_SCALE: u32 = 32774;
pub const GLX_STATIC_GRAY: u32 = 32775;
pub const GLX_TRANSPARENT_RGB: u32 = 32776;
pub const GLX_TRANSPARENT_INDEX: u32 = 32777;
pub const GLX_VISUAL_ID: u32 = 32779;
pub const GLX_SCREEN: u32 = 32780;
pub const GLX_NON_CONFORMANT_CONFIG: u32 = 32781;
pub const GLX_DRAWABLE_TYPE: u32 = 32784;
pub const GLX_RENDER_TYPE: u32 = 32785;
pub const GLX_X_RENDERABLE: u32 = 32786;
pub const GLX_FBCONFIG_ID: u32 = 32787;
pub const GLX_RGBA_TYPE: u32 = 32788;
pub const GLX_COLOR_INDEX_TYPE: u32 = 32789;
pub const GLX_MAX_PBUFFER_WIDTH: u32 = 32790;
pub const GLX_MAX_PBUFFER_HEIGHT: u32 = 32791;
pub const GLX_MAX_PBUFFER_PIXELS: u32 = 32792;
pub const GLX_PRESERVED_CONTENTS: u32 = 32795;
pub const GLX_LARGEST_PBUFFER: u32 = 32796;
pub const GLX_WIDTH: u32 = 32797;
pub const GLX_HEIGHT: u32 = 32798;
pub const GLX_EVENT_MASK: u32 = 32799;
pub const GLX_DAMAGED: u32 = 32800;
pub const GLX_SAVED: u32 = 32801;
pub const GLX_WINDOW: u32 = 32802;
pub const GLX_PBUFFER: u32 = 32803;
pub const GLX_PBUFFER_HEIGHT: u32 = 32832;
pub const GLX_PBUFFER_WIDTH: u32 = 32833;
pub const GLX_RGBA_BIT: u32 = 1;
pub const GLX_COLOR_INDEX_BIT: u32 = 2;
pub const GLX_PBUFFER_CLOBBER_MASK: u32 = 134217728;
pub const GLX_SAMPLE_BUFFERS: u32 = 100000;
pub const GLX_SAMPLES: u32 = 100001;
pub const GLX_PbufferClobber: u32 = 0;
pub const GLX_BufferSwapComplete: u32 = 1;
pub const __GLX_NUMBER_EVENTS: u32 = 17;
pub const GLX_ARB_get_proc_address: u32 = 1;
pub const GLX_ARB_render_texture: u32 = 1;
pub const GLX_MESA_swap_frame_usage: u32 = 1;
pub type XID = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XExtData {
    pub number: ::std::os::raw::c_int,
    pub next: *mut _XExtData,
    pub free_private: unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
    pub private_data: XPointer,
}
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visual {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub bits_per_rgb: ::std::os::raw::c_int,
    pub map_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
pub type Display = _XDisplay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XVisualInfo {
    pub visual: *mut Visual,
    pub visualid: VisualID,
    pub screen: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub colormap_size: ::std::os::raw::c_int,
    pub bits_per_rgb: ::std::os::raw::c_int,
}
pub type GLvoid = ::std::os::raw::c_void;
pub type GLubyte = ::std::os::raw::c_uchar;
pub type GLsizei = ::std::os::raw::c_int;
pub type GLfloat = f32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLXcontextRec {
    _unused: [u8; 0],
}
pub type GLXContext = *mut __GLXcontextRec;
pub type GLXPixmap = XID;
pub type GLXDrawable = XID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLXFBConfigRec {
    _unused: [u8; 0],
}
pub type GLXFBConfig = *mut __GLXFBConfigRec;
pub type GLXFBConfigID = XID;
pub type GLXContextID = XID;
pub type GLXWindow = XID;
pub type GLXPbuffer = XID;
extern "C" {
    pub fn glXChooseVisual(dpy: *mut Display, screen: ::std::os::raw::c_int, attribList: *mut ::std::os::raw::c_int) -> *mut XVisualInfo;
}
extern "C" {
    pub fn glXCreateContext(dpy: *mut Display, vis: *mut XVisualInfo, shareList: GLXContext, direct: ::std::os::raw::c_int) -> GLXContext;
}
extern "C" {
    pub fn glXDestroyContext(dpy: *mut Display, ctx: GLXContext);
}
extern "C" {
    pub fn glXMakeCurrent(dpy: *mut Display, drawable: GLXDrawable, ctx: GLXContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXCopyContext(dpy: *mut Display, src: GLXContext, dst: GLXContext, mask: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn glXSwapBuffers(dpy: *mut Display, drawable: GLXDrawable);
}
extern "C" {
    pub fn glXCreateGLXPixmap(dpy: *mut Display, visual: *mut XVisualInfo, pixmap: Pixmap) -> GLXPixmap;
}
extern "C" {
    pub fn glXDestroyGLXPixmap(dpy: *mut Display, pixmap: GLXPixmap);
}
extern "C" {
    pub fn glXQueryExtension(dpy: *mut Display, errorb: *mut ::std::os::raw::c_int, event: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXQueryVersion(dpy: *mut Display, maj: *mut ::std::os::raw::c_int, min: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXIsDirect(dpy: *mut Display, ctx: GLXContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXGetConfig(dpy: *mut Display, visual: *mut XVisualInfo, attrib: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXGetCurrentContext() -> GLXContext;
}
extern "C" {
    pub fn glXGetCurrentDrawable() -> GLXDrawable;
}
extern "C" {
    pub fn glXWaitGL();
}
extern "C" {
    pub fn glXWaitX();
}
extern "C" {
    pub fn glXUseXFont(font: Font, first: ::std::os::raw::c_int, count: ::std::os::raw::c_int, list: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glXQueryExtensionsString(dpy: *mut Display, screen: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glXQueryServerString(dpy: *mut Display, screen: ::std::os::raw::c_int, name: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glXGetClientString(dpy: *mut Display, name: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glXGetCurrentDisplay() -> *mut Display;
}
extern "C" {
    pub fn glXChooseFBConfig(
        dpy: *mut Display,
        screen: ::std::os::raw::c_int,
        attribList: *const ::std::os::raw::c_int,
        nitems: *mut ::std::os::raw::c_int,
    ) -> *mut GLXFBConfig;
}
extern "C" {
    pub fn glXGetFBConfigAttrib(
        dpy: *mut Display,
        config: GLXFBConfig,
        attribute: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXGetFBConfigs(dpy: *mut Display, screen: ::std::os::raw::c_int, nelements: *mut ::std::os::raw::c_int) -> *mut GLXFBConfig;
}
extern "C" {
    pub fn glXGetVisualFromFBConfig(dpy: *mut Display, config: GLXFBConfig) -> *mut XVisualInfo;
}
extern "C" {
    pub fn glXCreateWindow(dpy: *mut Display, config: GLXFBConfig, win: Window, attribList: *const ::std::os::raw::c_int) -> GLXWindow;
}
extern "C" {
    pub fn glXDestroyWindow(dpy: *mut Display, window: GLXWindow);
}
extern "C" {
    pub fn glXCreatePixmap(dpy: *mut Display, config: GLXFBConfig, pixmap: Pixmap, attribList: *const ::std::os::raw::c_int) -> GLXPixmap;
}
extern "C" {
    pub fn glXDestroyPixmap(dpy: *mut Display, pixmap: GLXPixmap);
}
extern "C" {
    pub fn glXCreatePbuffer(dpy: *mut Display, config: GLXFBConfig, attribList: *const ::std::os::raw::c_int) -> GLXPbuffer;
}
extern "C" {
    pub fn glXDestroyPbuffer(dpy: *mut Display, pbuf: GLXPbuffer);
}
extern "C" {
    pub fn glXQueryDrawable(dpy: *mut Display, draw: GLXDrawable, attribute: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_uint);
}
extern "C" {
    pub fn glXCreateNewContext(
        dpy: *mut Display,
        config: GLXFBConfig,
        renderType: ::std::os::raw::c_int,
        shareList: GLXContext,
        direct: ::std::os::raw::c_int,
    ) -> GLXContext;
}
extern "C" {
    pub fn glXMakeContextCurrent(dpy: *mut Display, draw: GLXDrawable, read: GLXDrawable, ctx: GLXContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXGetCurrentReadDrawable() -> GLXDrawable;
}
extern "C" {
    pub fn glXQueryContext(dpy: *mut Display, ctx: GLXContext, attribute: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXSelectEvent(dpy: *mut Display, drawable: GLXDrawable, mask: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn glXGetSelectedEvent(dpy: *mut Display, drawable: GLXDrawable, mask: *mut ::std::os::raw::c_ulong);
}
pub type PFNGLXGETFBCONFIGSPROC =
    unsafe extern "C" fn(dpy: *mut Display, screen: ::std::os::raw::c_int, nelements: *mut ::std::os::raw::c_int) -> *mut GLXFBConfig;
pub type PFNGLXCHOOSEFBCONFIGPROC = unsafe extern "C" fn(
    dpy: *mut Display,
    screen: ::std::os::raw::c_int,
    attrib_list: *const ::std::os::raw::c_int,
    nelements: *mut ::std::os::raw::c_int,
) -> *mut GLXFBConfig;
pub type PFNGLXGETFBCONFIGATTRIBPROC =
    unsafe extern "C" fn(dpy: *mut Display, config: GLXFBConfig, attribute: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
pub type PFNGLXGETVISUALFROMFBCONFIGPROC = unsafe extern "C" fn(dpy: *mut Display, config: GLXFBConfig) -> *mut XVisualInfo;
pub type PFNGLXCREATEWINDOWPROC =
    unsafe extern "C" fn(dpy: *mut Display, config: GLXFBConfig, win: Window, attrib_list: *const ::std::os::raw::c_int) -> GLXWindow;
pub type PFNGLXDESTROYWINDOWPROC = unsafe extern "C" fn(dpy: *mut Display, win: GLXWindow);
pub type PFNGLXCREATEPIXMAPPROC =
    unsafe extern "C" fn(dpy: *mut Display, config: GLXFBConfig, pixmap: Pixmap, attrib_list: *const ::std::os::raw::c_int) -> GLXPixmap;
pub type PFNGLXDESTROYPIXMAPPROC = unsafe extern "C" fn(dpy: *mut Display, pixmap: GLXPixmap);
pub type PFNGLXCREATEPBUFFERPROC = unsafe extern "C" fn(dpy: *mut Display, config: GLXFBConfig, attrib_list: *const ::std::os::raw::c_int) -> GLXPbuffer;
pub type PFNGLXDESTROYPBUFFERPROC = unsafe extern "C" fn(dpy: *mut Display, pbuf: GLXPbuffer);
pub type PFNGLXQUERYDRAWABLEPROC =
    unsafe extern "C" fn(dpy: *mut Display, draw: GLXDrawable, attribute: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_uint);
pub type PFNGLXCREATENEWCONTEXTPROC = unsafe extern "C" fn(
    dpy: *mut Display,
    config: GLXFBConfig,
    render_type: ::std::os::raw::c_int,
    share_list: GLXContext,
    direct: ::std::os::raw::c_int,
) -> GLXContext;
pub type PFNGLXMAKECONTEXTCURRENTPROC = unsafe extern "C" fn(dpy: *mut Display, draw: GLXDrawable, read: GLXDrawable, ctx: GLXContext) -> ::std::os::raw::c_int;
pub type PFNGLXGETCURRENTREADDRAWABLEPROC = unsafe extern "C" fn() -> GLXDrawable;
pub type PFNGLXGETCURRENTDISPLAYPROC = unsafe extern "C" fn() -> *mut Display;
pub type PFNGLXQUERYCONTEXTPROC =
    unsafe extern "C" fn(dpy: *mut Display, ctx: GLXContext, attribute: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
pub type PFNGLXSELECTEVENTPROC = unsafe extern "C" fn(dpy: *mut Display, draw: GLXDrawable, event_mask: ::std::os::raw::c_ulong);
pub type PFNGLXGETSELECTEDEVENTPROC = unsafe extern "C" fn(dpy: *mut Display, draw: GLXDrawable, event_mask: *mut ::std::os::raw::c_ulong);
pub type __GLXextFuncPtr = unsafe extern "C" fn();
extern "C" {
    pub fn glXGetProcAddressARB(arg1: *const GLubyte) -> __GLXextFuncPtr;
}
extern "C" {
    pub fn glXGetProcAddress(procname: *const GLubyte) -> unsafe extern "C" fn(procname: *const GLubyte);
}
pub type PFNGLXGETPROCADDRESSPROC = unsafe extern "C" fn(procName: *const GLubyte) -> __GLXextFuncPtr;
extern "C" {
    pub fn glXAllocateMemoryNV(size: GLsizei, readfreq: GLfloat, writefreq: GLfloat, priority: GLfloat) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glXFreeMemoryNV(pointer: *mut GLvoid);
}
pub type PFNGLXALLOCATEMEMORYNVPROC =
    unsafe extern "C" fn(size: GLsizei, readfreq: GLfloat, writefreq: GLfloat, priority: GLfloat) -> *mut ::std::os::raw::c_void;
pub type PFNGLXFREEMEMORYNVPROC = unsafe extern "C" fn(pointer: *mut GLvoid);
extern "C" {
    pub fn glXBindTexImageARB(dpy: *mut Display, pbuffer: GLXPbuffer, buffer: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXReleaseTexImageARB(dpy: *mut Display, pbuffer: GLXPbuffer, buffer: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXDrawableAttribARB(dpy: *mut Display, draw: GLXDrawable, attribList: *const ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXGetFrameUsageMESA(dpy: *mut Display, drawable: GLXDrawable, usage: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXBeginFrameTrackingMESA(dpy: *mut Display, drawable: GLXDrawable) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXEndFrameTrackingMESA(dpy: *mut Display, drawable: GLXDrawable) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glXQueryFrameTrackingMESA(
        dpy: *mut Display,
        drawable: GLXDrawable,
        swapCount: *mut i64,
        missedFrames: *mut i64,
        lastMissedUsage: *mut f32,
    ) -> ::std::os::raw::c_int;
}
pub type PFNGLXGETFRAMEUSAGEMESAPROC = unsafe extern "C" fn(dpy: *mut Display, drawable: GLXDrawable, usage: *mut f32) -> ::std::os::raw::c_int;
pub type PFNGLXBEGINFRAMETRACKINGMESAPROC = unsafe extern "C" fn(dpy: *mut Display, drawable: GLXDrawable) -> ::std::os::raw::c_int;
pub type PFNGLXENDFRAMETRACKINGMESAPROC = unsafe extern "C" fn(dpy: *mut Display, drawable: GLXDrawable) -> ::std::os::raw::c_int;
pub type PFNGLXQUERYFRAMETRACKINGMESAPROC = unsafe extern "C" fn(
    dpy: *mut Display,
    drawable: GLXDrawable,
    swapCount: *mut i64,
    missedFrames: *mut i64,
    lastMissedUsage: *mut f32,
) -> ::std::os::raw::c_int;
#[doc = " Should these go here, or in another header?"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLXPbufferClobberEvent {
    pub event_type: ::std::os::raw::c_int,
    pub draw_type: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: GLXDrawable,
    pub buffer_mask: ::std::os::raw::c_uint,
    pub aux_buffer: ::std::os::raw::c_uint,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLXBufferSwapComplete {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: GLXDrawable,
    pub event_type: ::std::os::raw::c_int,
    pub ust: i64,
    pub msc: i64,
    pub sbc: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __GLXEvent {
    pub glxpbufferclobber: GLXPbufferClobberEvent,
    pub glxbufferswapcomplete: GLXBufferSwapComplete,
    pub pad: [::std::os::raw::c_long; 24usize],
}
pub type GLXEvent = __GLXEvent;
